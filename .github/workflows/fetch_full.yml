name: Update PhishFort Full Domain List

on:
  schedule:
    # Schedule the action to run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  update_domains:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Fetch latest changes from the remote repository
      - name: Fetch latest changes
        run: git fetch origin main

      # Pull changes from the remote main branch and rebase
      - name: Pull changes and rebase
        run: git pull origin main --rebase

      # Download PhishFort domain list
      - name: Download PhishFort domain list
        run: curl -o domains.json https://raw.githubusercontent.com/phishfort/phishfort-lists/master/blacklists/domains.json

      # Install necessary tools
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y parallel jq

      # Parse JSON and extract domains with DNS status OK using multiple DNS servers and parallel processing
      - name: Parse JSON and extract valid domains
        run: |
          jq -r '.[]' domains.json | sort | uniq > phishfort_full_only_domains_all.txt
          > phishfort_full_only_domains_new.txt
          DNS_SERVERS=(8.8.8.8 8.8.4.4 1.1.1.1 9.9.9.9 208.67.222.222 208.67.220.220)
          export DNS_SERVERS

          # Loop over each domain and query DNS servers for IP address
          for domain in $(cat phishfort_full_only_domains_all.txt); do
              resolved=false
              for dns in "${DNS_SERVERS[@]}"; do
                  if dig +short @"$dns" "$domain" > /dev/null; then
                      echo "$domain" >> phishfort_full_only_domains_new.txt
                      resolved=true
                      break
                  fi
              done
              if [ "$resolved" = false ]; then
                  echo "Failed to resolve domain: $domain"
              fi
          done
          
      # Check if the domain list is not empty
      - name: Check if domain list is not empty
        run: |
          if [ -s phishfort_full_only_domains_new.txt ]; then
            echo "Domain list is not empty."
          else
            echo "Domain list is empty."
            exit 1
          fi

      # Count the number of domains
      - name: Count the number of domains
        id: count_domains
        run: |
          num_domains=$(wc -l < phishfort_full_only_domains_new.txt)
          echo "num_domains=$num_domains" >> $GITHUB_ENV

      # Add descriptions and count to output files
      - name: Add descriptions and count to output files
        run: |
          timestamp=$(date)
          num_domains=$(wc -l < phishfort_full_only_domains_new.txt)
          formats=("hosts" "adguardhome" "only_domains" "rpz" "unbound")

          for format in "${formats[@]}"; do
            output_file="phishfort_full_${format}.txt"
            {
              echo "# PhishFort Full Domain List - $timestamp"
              echo "# Number of Entries: $num_domains"
              echo "# Project: PhishFort (https://phishfort.com/)"
              case $format in
                hosts)
                  echo "# This list is formatted for use with hosts file."
                  echo "# It redirects listed domains to 0.0.0.0, blocking access."
                  ;;
                adguardhome)
                  echo "# This list is formatted for use with AdGuard Home."
                  echo "# It blocks access to domains listed in PhishFort blacklists."
                  ;;
                only_domains)
                  echo "# This list contains only the domain names listed in PhishFort blacklists."
                  ;;
                rpz)
                  echo "# This list is formatted for use with DNS Response Policy Zone (RPZ) servers."
                  echo "# It redirects listed domains to 0.0.0.0, blocking access."
                  ;;
                unbound)
                  echo "# This list is formatted for use with Unbound DNS servers."
                  echo "# It blocks access to domains listed in PhishFort blacklists."
                  ;;
              esac
              echo "# This list is provided by the PhishFort project, which aims to combat phishing and malicious activities."
              echo ""
            } > "$output_file"
          done

      # Generate output lists
      - name: Generate output lists
        run: |
          awk '{ print "0.0.0.0", $1 }' phishfort_full_only_domains_new.txt >> phishfort_full_hosts.txt
          awk '{ print "||" $1 "^" }' phishfort_full_only_domains_new.txt >> phishfort_full_adguardhome.txt
          awk '{ print $1 }' phishfort_full_only_domains_new.txt >> phishfort_full_only_domains.txt
          awk '{ print "local-zone: \"" $1 "\" redirect\nlocal-data: \"" $1 " A 0.0.0.0\"" }' phishfort_full_only_domains_new.txt >> phishfort_full_rpz.conf
          awk '{ print "local-zone: \"" $1 "\" static\nlocal-data: \"" $1 " A 0.0.0.0\"" }' phishfort_full_only_domains_new.txt >> phishfort_full_unbound.conf

      # Check if only the timestamp line has changed
      - name: Check if only the timestamp line has changed
        id: check_timestamp_change
        run: |
          if diff --suppress-common-lines -q <(tail -n +2 phishfort_full_only_domains.txt) <(tail -n +2 phishfort_full_only_domains_new.txt) >/dev/null; then
            echo "changed=false" >> $GITHUB_ENV
          else
            echo "changed=true" >> $GITHUB_ENV

      # Commit and push changes if the content has changed
      - name: Commit and push changes if the content has changed
        if: env.changed == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@users.noreply.github.com"
          git add phishfort_full_hosts.txt phishfort_full_adguardhome.txt phishfort_full_only_domains.txt phishfort_full_rpz.conf phishfort_full_unbound.conf
          git commit -m "Update PhishFort domain lists" && git push
